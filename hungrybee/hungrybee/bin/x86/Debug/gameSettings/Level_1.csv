//, NOTE: NO SPACES
//, NOTE: BOUNDING OBJECT TYPES ARE: bType = [AUTO, AABB, SPHERE]
//, NOTE: PHANTOM TYPES ARE: pType = [SOFT_BOUNDRY, HARD_BOUNDRY] --> Soft boundry requires a force vector and bools to describe who reacts to it

//,player, modelfile, bType, scale, [Pos.x, Pos.y, Pos.z]
player,Ship,SPHERE,1.0,-2,-1,0

//,enemy, modelfile, bType, scale, [Pos.x, Pos.y, Pos.z], [Mom.x, Mom.y, Mom.z]
enemy,Ship,SPHERE,1.0,-3.1,-1.5,0,0,0,0

//,friend, modelfile, bType, scale, [Pos.x, Pos.y, Pos.z], [Mom.x, Mom.y, Mom.z]
friend,Ship,SPHERE,0.5,3.5,-1.5,0,0,0,0

//,phantom,  bType[AABB], [Min.x, Min.y, Min.z], [Max.x, Max.y, Max.z], pType, ([:F.x, :F.y, :F.z], :player_react, :npc_react) <-- Only for SOFT_BOUNDRY
//,phantom,  bType[SPHERE], [Pos.x, Pos.y, Pos.z], Radius
phantom,AABB,2,-1.999,-1,2.1,0,1,HARD_BOUNDRY
phantom,AABB,1.8,-1.999,-1,1.9,0,1,SOFT_BOUNDRY,-5,0,0,0,1

//,cloud, # circles, # stacks per circle, # slices per circle, [Min.x, Min.y, Min.z], [Max.x, Max.y, Max.z]
cloud,20,20,20,-1,-0.5,-0.5,1,0,0.5

//,heightMap, heightMapFile, heightMapTextureFile, [xmin,ymin,zmin], [xmax,ymax,zmax]
heightMap,false,heightmap,Grass,-8,-5,-5,8,-2,5