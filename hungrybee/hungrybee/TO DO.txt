1. Put together RK4 integrator for gameObjects --> Decide whether game controls should be force or impulse
2. Implement collision routine: 
  a) Given up on AABBs.  Bounding sphere messes up when hitting the corner of an AABB --> Debug
  b) Implement resting forces
  c) Implement collision Vs. screen bounds
3. Implement player controls: using quaternions to give half distances and RK4 integrator
4. Load the fucking models in...  Having lots of difficulty
5. Fix interpolation for draw.  Interpolation works, but DRAW() is giving wierd gameTime inputs. (How does XNA handle it)
6. Reduce redundant computations in collision detecdtion.
  a) Only flag dirty AABB for objects that move.
  b) Cache matricies and transformed bounding objects for fine collision detection (nothing saved at all!)
7. Coarse tune data structures are wasteful.  Some are O(n^2).  Reduce to only have (numCollidables choose 2).
8. Improve sphere-sphere collision detection routine --> use a method that avoids the sqrt call AND gets around floating point accuracy for large velocities



// Might help load the models: http://forums.xna.com/forums/p/37798/220378.aspx
// I think textures are getting fucked up