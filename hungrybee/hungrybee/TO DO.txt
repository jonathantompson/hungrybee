STUFF I SHOULD DO BEFORE ANYTHING ELSE
- Fix starting orientation --> It sets but the desired orientation (tied to force) isn't set
- Fix physics instability --> Stop player movement when they hit a wall.
						  --> Find out why max iterations gets hit for no apparent reason
						  --> Fix "collision isn't colliding" errors (happens when comming down on enemy from top left)

STUFF I SHOULD DO
- Finish options section of menu (maybe option to change diplay size and renderer type.
- Make particle effects and enemy blow up effect
- Profile performance: http://www.gamedev.net/community/forums/topic.asp?topic_id=474249
- Don't update bounding boxes for objects that cannot be moved (but do it once on startup)
- Sometimes the framerate is good, and sometimes it's slow.  Debug why.
- Fix the bee's wings --> Why don't they render?
- Get better sound effects.

STUFF I WOULD LIKE TO DO IF I HAVE TIME
- Add Gausian blur to clouds: http://www.webdesign.org/photoshop/drawing-techniques/cartoon-clouds.12701.html
- Fix interpolation for draw.  Interpolation works, but DRAW() is giving wierd gameTime inputs. (How does XNA handle it)
- Fix swept sphere collision code for AABB-sphere collisions --> Glancing collisions are failing to be detected. (where velocity is nearly perpendicular to collision normal)
- Fix swept collision bug where collision time returns 0.0f if the objects start close but not intersecting (0.0000001f distance)
- Actually implement a LCP solver so that I can do Baraff's "Fast Contact Force Computation for Nonpenetrating Rigid Bodies"
  a) Resting contact code is a hodge-podge of non-physical hacks.  Anti gravity force to allow resting vertically + small impulses to push resting objects apart.
  b) Either implement the paper as is OR
  c) Try and bring in Dave Eberly's Geometric tools LCP solver as C++ managed code.
- Reduce redundant computations in collision detecdtion.
  a) Only flag dirty AABB for objects that move.
  b) Cache matricies and transformed bounding objects for fine collision detection (nothing saved at all!)
  c) By-and-large the collision detection / responce routine is horribly unoptimized
- Coarse tune data structures are wasteful.  Some are O(n^2).  Reduce to only have (numCollidables choose 2).
- Improve sphere-sphere collision detection routine --> use a method that avoids the sqrt call AND gets around 
    floating point accuracy for large velocities