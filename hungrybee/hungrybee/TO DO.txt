
STUFF I SHOULD DO BEFORE ANYTHING ELSE
- FINISH XNAUtils.GetBoundingSphereFromModel()
- Debug instability --> When Player glances off the enemy, the collision isn't colliding! (press jump and left on startup)
                    --> Try adding an impulse "kick" to objects that are causing physics system to hit max iterations
                    --> Hitting max iterations during normal operation as well.
                    --> Check this function!! CreateAABBFromModel()

STUFF I HAVE TO DO
- Make Bee friends collectable (on collision AND have game complete logic)
- Add cats and dogs class --> Which is just a sphereical projectile that dies after a set time.
- Make a menu, including settings for changing the shader effects (jitter on/off, etc)
- Make the audio responces (http://msdn.microsoft.com/en-us/library/bb203895(v=XNAGameStudio.31).aspx)
- Make particle effects and enemy blow up effect
- Profile performance: http://www.gamedev.net/community/forums/topic.asp?topic_id=474249
- Don't update bounding boxes for objects that cannot be moved.

STUFF I WOULD LIKE TO DO IF I HAVE TIME
- Add Gausian blur to clouds: http://www.webdesign.org/photoshop/drawing-techniques/cartoon-clouds.12701.html
- Fix interpolation for draw.  Interpolation works, but DRAW() is giving wierd gameTime inputs. (How does XNA handle it)
- Fix swept sphere collision code for AABB-sphere collisions --> Glancing collisions are failing to be detected. (where velocity is nearly perpendicular to collision normal)
- Fix swept collision bug where collision time returns 0.0f if the objects start close but not intersecting (0.0000001f distance)
- Actually implement a LCP solver so that I can do Baraff's "Fast Contact Force Computation for Nonpenetrating Rigid Bodies"
  a) Resting contact code is a hodge-podge of non-physical hacks.  Anti gravity force to allow resting vertically + small impulses to push resting objects apart.
  b) Either implement the paper as is OR
  c) Try and bring in Dave Eberly's Geometric tools LCP solver as C++ managed code.
- Reduce redundant computations in collision detecdtion.
  a) Only flag dirty AABB for objects that move.
  b) Cache matricies and transformed bounding objects for fine collision detection (nothing saved at all!)
  c) By-and-large the collision detection / responce routine is horribly unoptimized
- Coarse tune data structures are wasteful.  Some are O(n^2).  Reduce to only have (numCollidables choose 2).
- Improve sphere-sphere collision detection routine --> use a method that avoids the sqrt call AND gets around 
    floating point accuracy for large velocities